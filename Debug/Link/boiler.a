;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;char* boiler_state_str[] = {
;"idle    ",
;"starting",
;"heating ",
;"pre-blow",
;"blow2   ",
;"cooling ",
;};

	.DSEG
_0x20003:
	.BYTE 0x36
;char* start_sequence_stage_str[] = {
;"none      ",      //"none      ",
;"blowingoff",      //"blowing   ",
;"blowPreChk",      //"fire test ",
;"blowing   ",      //"fire work ",
;"trans ON  ",      //"clapan tst",
;"clapTstChk",      //"clapTstChk"
;"clapanPreW",      //"clapanPreW"
;"clapan wrk",      //"clapan wrk",
;"transformr",      //"transformr"
;"ion test  ",      //"ion test  ",
;"ion work  ",      //"ion work  ",
;};
_0x20005:
	.BYTE 0x79
;char*  boiler_role_str[] = {
;" no model",
;"  UK 103  ",
;"  UK 203  ",
;"  UK 303  ",
;"LAN master",
;"LAN slave1",
;"LAN slave2",
;};
_0x20007:
	.BYTE 0x4C
;char* weather_dep_str[] = {
;"None  ",  //   "\x8E\xA1\xA4\xB1\xA6\xA3",  //
;"Winter",  //   "  \x88\xA9\xAD\xA1",        //
;"Summer"   //   "  \x8C\xA6\xB3\xAF"         //
;};
_0x20009:
	.BYTE 0x15
;char* errors_str[] = {
;"None",                 // "\x8E\xA6\xB3",                                       ...
;"Water level",          // "\x94\xB1\xAF\xA3\xA6\xAE\xBD \xA3\xAF\xA5\xBC",      ...
;"Overheat",             // "\x90\xA6\xB1\xA6\xA4\xB1\xA6\xA3",                   ...
;"Flame detector test",  // "\x8C\xAF\xA7\xAE\xAF\xA6 \xB0\xAC\xA1\xAD\xC0",      ...
;"No flame",             // "\x8E\xA6\xB3 \xB0\xAC\xA1\xAD\xA6\xAE\xA9",          ...
;"Ion detector test",    // "\x93\xA6\xB2\xB3 \xA9\xAF\xAE\xA9\xA8\xA1\xB7\xA9\xA ...
;"No ionization",        // "\x8E\xA6\xB3 \xA9\xAF\xAE\xA9\xA8\xA1\xB7\xA9\xA9",  ...
;"Air detector test",    // "\x93\xA6\xB2\xB3 \xA5\xA1\xB3\xB8\xA9\xAB\xA1 \xA3\x ...
;"Air detector work",    // "\x91\xA1\xA2\xAF\xB3\xA1 \xA5\xA1\xB3\xB8\xA9\xAB\xA ...
;"Thermistor failure",   // "\x8F\xB9\xA9\xA2\xAB\xA1 \xB3\xA6\xB1\xAD\xA9\xB2\xB ...
;};
_0x2000B:
	.BYTE 0x8E
;typedef struct{
;int16_t        water_goal_temp;
;int16_t        gisteresis;
;int16_t        pump_on_temp;
;int16_t        pump_gist_temp;
;weather_dep_e  weather;
;boiler_role    role;
;boiler_state_e command;
;uint8_t        not_programmed;
;}nvm_data_t;
;eeprom  nvm_data_t eeinit_data;
;nvm_data_t eedefault = {
;.water_goal_temp = 50,
;.gisteresis      = 5,
;.pump_on_temp    = 15,
;.pump_gist_temp  = 3,
;.weather         = weather_none,
;.role            = role_UK_203,
;.command         = boiler_idle,
;.not_programmed  = 0,
;};
;nvm_data_t nvm_cache;
;boiler_t boiler;
;void turnAllOff(void){
; 0001 0060 void turnAllOff(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0061 TransRozgiga_OFF;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0062 Ventilaytor_OFF;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0063 Topl_Nasos_OFF;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0064 //Setevoi_nasos_OFF;
; 0001 0065 Klapan1_OFF;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0066 Klapan2_OFF;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0067 boiler.time_of_last_stage = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0068 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;void boiler_init(void){
; 0001 006A void boiler_init(void){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 006B PRINT(">>boiler_init()\r\n");
; 0001 006C eeprom_read_block(&nvm_cache, &eeinit_data, sizeof(nvm_data_t));
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 006D if(nvm_cache.not_programmed){
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 006E eeprom_write_block(&eedefault, &eeinit_data, sizeof(nvm_data_t));
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 006F eeprom_read_block(&nvm_cache, &eeinit_data, sizeof(nvm_data_t));
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0070 }
; 0001 0071 
; 0001 0072 boiler.command         = nvm_cache.command;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0073 boiler.water_goal_temp = nvm_cache.water_goal_temp;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 0074 boiler.water_pump_on_temp = nvm_cache.pump_on_temp;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0075 boiler.water_pump_gist_temp = nvm_cache.pump_gist_temp;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0076 boiler.gisteresis      = nvm_cache.gisteresis;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0077 boiler.weather         = nvm_cache.weather;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0078 boiler.role            = nvm_cache.role;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0079 //TODO: CRC or checksum
; 0001 007A 
; 0001 007B boiler.vdd = 5.0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 007C boiler.vref = 2.050;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 007D boiler.K_adc =  boiler.vref / 1023;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 007E 
; 0001 007F PRINT("<<boiler_init()\r\n");
; 0001 0080 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;char check_reset_error(errors_e err, uint32_t err_condition){
; 0001 0082 char check_reset_error(errors_e err, uint32_t err_condition){
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0083 if(boiler.error == err){
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;	err -> R17
;	err_condition -> Y+1
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0084 if(!err_condition){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0085 boiler.error = error_None;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0086 }
; 0001 0087 }
;PCODE: $00000073 VOL: 0
; 0001 0088 if(err_condition){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 0089 boiler.error = err;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 008A return 1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 008B }
; 0001 008C return 0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 008D }
;PCODE: $00000086 VOL: 0
;void check_errors(void){
; 0001 0090 void check_errors(void){
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 0091 PRINT(">>>check_errors\r\n");
; 0001 0092 if(check_reset_error(error_WaterLevel, !Uroven_out)){
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 0093 return;
;PCODE: $00000094 VOL: 0
; 0001 0094 }
; 0001 0095 if(check_reset_error(error_Overheat, t_max_out)){
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 0096 return;
;PCODE: $000000A0 VOL: 0
; 0001 0097 }
; 0001 0098 if(check_reset_error(error_WaterTempError, (boiler.water_temp < WATER_TEMP_MIN)  ...
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 0099 return;
;PCODE: $000000B8 VOL: 0
; 0001 009A }
; 0001 009B 
; 0001 009C PRINT("switch state = %s\r\n", boiler_state_str[boiler.state]);
;PCODE: $000000B9 VOL: 0
; 0001 009D PRINT("switch start = %s\r\n", start_sequence_stage_str[boiler.start_stage]);
; 0001 009E PRINT("switch role = %s\r\n", boiler_role_str[boiler.role]);
; 0001 009F switch (boiler.state){
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 00A0 case boiler_idle:
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00A1 PRINT("boiler idle...\r\n");
; 0001 00A2 break;
;PCODE: $000000BF VOL: 0
; 0001 00A3 case boiler_start_sequence:
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 00A4 PRINT("boiler boiler_start_sequence...\r\n");
; 0001 00A5 switch(boiler.role){
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0001 00A6 case role_not_selected:
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 00A7 PRINT("role_not_selected...\r\n");
; 0001 00A8 break;
;PCODE: $000000C9 VOL: 0
; 0001 00A9 case role_UK_103:
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 00AA PRINT("role_UK_103...\r\n");
; 0001 00AB switch (boiler.start_stage){
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 00AC case stage_none:
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 00AD case stage_blowing:
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 00AE PRINT("stage_none or stage_blowing...\r\n");
; 0001 00AF if(plamya_out){
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 00B0 boiler.error = error_FlameTest;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 00B1 }
; 0001 00B2 break;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 00B3 case stage_transformer_on:
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 00B4 break;
;PCODE: $000000E5 VOL: 0
; 0001 00B5 default:
;PCODE: $000000E6 VOL: 0
; 0001 00B6 
; 0001 00B7 break;
;PCODE: $000000E7 VOL: 0
; 0001 00B8 }
;PCODE: $000000E8 VOL: 0
; 0001 00B9 break;
;PCODE: $000000E9 VOL: 0
; 0001 00BA case role_UK_203:
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 00BB PRINT("UK_203...\r\n");
; 0001 00BC switch (boiler.start_stage){
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 00BD case stage_none:
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 00BE case stage_blowing_test_off_check:
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 00BF PRINT("stge none blowing test...\r\n");
; 0001 00C0 if(clapan_out()){
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 00C1 PRINT("errror air test...\r\n");
; 0001 00C2 boiler.error = error_AirDetectorTest;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 00C3 return;
;PCODE: $000000FF VOL: 0
; 0001 00C4 }
; 0001 00C5 if(Ion_out){
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 00C6 PRINT("ion test...\r\n");
; 0001 00C7 boiler.error = error_IonTest;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0001 00C8 }
; 0001 00C9 break;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 00CA case stage_blowing_test_on_pre_check:
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0001 00CB PRINT("test on pre check...\r\n");
; 0001 00CC if(Ion_out){
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 00CD PRINT("ion test...\r\n");
; 0001 00CE boiler.error = error_IonTest;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 00CF }
; 0001 00D0 break;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 00D1 
; 0001 00D2 case stage_blowing:
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 00D3 PRINT("blowing...\r\n");
; 0001 00D4 if(!clapan_out()){
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 00D5 boiler.error = error_AirDetectorWork;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 00D6 return;
;PCODE: $0000011F VOL: 0
; 0001 00D7 }
; 0001 00D8 if(Ion_out){
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0001 00D9 boiler.error = error_IonTest;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 00DA }
; 0001 00DB break;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 00DC default:
;PCODE: $00000129 VOL: 0
; 0001 00DD 
; 0001 00DE break;
;PCODE: $0000012A VOL: 0
; 0001 00DF 
; 0001 00E0 }
;PCODE: $0000012B VOL: 0
; 0001 00E1 break;
;PCODE: $0000012C VOL: 0
; 0001 00E2 case role_UK_303:
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 00E3 
; 0001 00E4 break;
;PCODE: $00000131 VOL: 0
; 0001 00E5 case role_LAN_master:
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 00E6 
; 0001 00E7 break;
;PCODE: $00000136 VOL: 0
; 0001 00E8 case role_LAN_slave1:
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 00E9 
; 0001 00EA break;
;PCODE: $0000013B VOL: 0
; 0001 00EB case role_LAN_slave2:
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 00EC 
; 0001 00ED break;
;PCODE: $00000140 VOL: 0
; 0001 00EE 
; 0001 00EF }
;PCODE: $00000141 VOL: 0
; 0001 00F0 break;
;PCODE: $00000142 VOL: 0
; 0001 00F1 case boiler_work_heating:
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 00F2 PRINT("boiler_work_heating...\r\n");
; 0001 00F3 switch(boiler.role){
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 00F4 case role_not_selected:
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 00F5 break;
;PCODE: $0000014C VOL: 0
; 0001 00F6 case role_UK_103:
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 00F7 if(!plamya_out){
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 00F8 PRINT("error_FlameWork...\r\n");
; 0001 00F9 boiler.error = error_FlameWork;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 00FA }
; 0001 00FB break;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 00FC case role_UK_203:
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 00FD if(!clapan_out()){
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 00FE boiler.error = error_AirDetectorWork;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0001 00FF return;
;PCODE: $00000163 VOL: 0
; 0001 0100 }
; 0001 0101 if(!Ion_out){
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0001 0102 boiler.error = error_IonWork;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 0103 }
; 0001 0104 break;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0001 0105 case role_UK_303:
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 0106 
; 0001 0107 break;
;PCODE: $00000171 VOL: 0
; 0001 0108 case role_LAN_master:
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0001 0109 
; 0001 010A break;
;PCODE: $00000176 VOL: 0
; 0001 010B case role_LAN_slave1:
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0001 010C 
; 0001 010D break;
;PCODE: $0000017B VOL: 0
; 0001 010E case role_LAN_slave2:
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 010F 
; 0001 0110 break;
;PCODE: $00000180 VOL: 0
; 0001 0111 
; 0001 0112 }
;PCODE: $00000181 VOL: 0
; 0001 0113 break;
;PCODE: $00000182 VOL: 0
; 0001 0114 
; 0001 0115 case bolier_work_blowing_precheck:
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0001 0116 
; 0001 0117 break;
;PCODE: $00000187 VOL: 0
; 0001 0118 
; 0001 0119 case boiler_work_blowing_after_heating:
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0001 011A PRINT("boiler_work_blowing_after_heating...\r\n");
; 0001 011B switch(boiler.role){
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 011C case role_not_selected:
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0001 011D break;
;PCODE: $00000191 VOL: 0
; 0001 011E case role_UK_103:
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0001 011F PRINT("error_FlameWork...\r\n");
; 0001 0120 if(plamya_out){
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 0121 boiler.error = error_FlameWork;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 0122 }
; 0001 0123 break;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 0124 case role_UK_203:
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0001 0125 if(!clapan_out()){
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0001 0126 boiler.error = error_AirDetectorWork;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0001 0127 return;
;PCODE: $000001A8 VOL: 0
; 0001 0128 }
; 0001 0129 if(Ion_out){
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0001 012A boiler.error = error_IonWork;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0001 012B }
; 0001 012C break;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0001 012D case role_UK_303:
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 012E 
; 0001 012F break;
;PCODE: $000001B6 VOL: 0
; 0001 0130 case role_LAN_master:
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0001 0131 
; 0001 0132 break;
;PCODE: $000001BB VOL: 0
; 0001 0133 case role_LAN_slave1:
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 0134 
; 0001 0135 break;
;PCODE: $000001C0 VOL: 0
; 0001 0136 case role_LAN_slave2:
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 0137 
; 0001 0138 break;
;PCODE: $000001C5 VOL: 0
; 0001 0139 }
;PCODE: $000001C6 VOL: 0
; 0001 013A break;
;PCODE: $000001C7 VOL: 0
; 0001 013B 
; 0001 013C case boiler_work_cooling:
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0001 013D 
; 0001 013E break;
;PCODE: $000001CC VOL: 0
; 0001 013F }
;PCODE: $000001CD VOL: 0
; 0001 0140 PRINT("<<<check_errors\r\n");
; 0001 0141 }
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;void boiler_update(){
; 0001 0143 void boiler_update(){
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0001 0144 PRINT(">>>boiler_update()\r\n");
; 0001 0145 PRINT("hadling %s\r\n", boiler_role_str[boiler.role]);
; 0001 0146 #if ERRORS_ACTIVE
; 0001 0147 check_errors();
;PCODE: $000001D2 VOL: 0
; 0001 0148 PRINT("error = %s\r\n", errors_str[boiler.error]);
; 0001 0149 #endif
; 0001 014A 
; 0001 014B 
; 0001 014C static uint32_t oneminute_counter = 0;
; 0001 014D 
; 0001 014E if(boiler.error == error_None){
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0001 014F }
; 0001 0150 else{
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0001 0151 if( (boiler.error == error_WaterLevel) ||
; 0001 0152 (boiler.error == error_Overheat)  ||
; 0001 0153 (boiler.error == error_WaterTempError)){
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0001 0154 }
; 0001 0155 else{//more serious errors
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0001 0156 boiler.command = boiler_idle;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0001 0157 }
;PCODE: $000001EC VOL: 0
; 0001 0158 boiler.state = boiler_idle;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0001 0159 boiler.start_stage = stage_none;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0001 015A }
;PCODE: $000001F3 VOL: 0
; 0001 015B 
; 0001 015C switch (boiler.state){
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0001 015D case boiler_idle:
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0001 015E //turn all off
; 0001 015F PRINT("boiler_idle...\r\n");
; 0001 0160 turnAllOff();
;PCODE: $000001F9 VOL: 0
; 0001 0161 if(boiler.command == boiler_work_heating){
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0001 0162 if(boiler.water_temp < boiler.water_goal_temp - boiler.gisteresis){
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0001 0163 boiler.state = boiler_start_sequence;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0001 0164 boiler.start_stage = stage_none;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0001 0165 }
; 0001 0166 else{
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0001 0167 boiler.state = boiler_work_cooling;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0001 0168 }
;PCODE: $00000213 VOL: 0
; 0001 0169 }
; 0001 016A else{
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0001 016B //keep evething off
; 0001 016C }
;PCODE: $00000216 VOL: 0
; 0001 016D break;
;PCODE: $00000217 VOL: 0
; 0001 016E 
; 0001 016F case boiler_start_sequence:
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0001 0170 PRINT("boiler_start_sequence...\r\n");
; 0001 0171 if(boiler.command == boiler_work_heating){
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0001 0172 if(boiler.water_temp < boiler.water_goal_temp){
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0001 0173 PRINT("water temp < goal...\r\n");
; 0001 0174 //ignition sequence
; 0001 0175 switch(boiler.role){
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0001 0176 case role_not_selected:
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0001 0177 PRINT("role_not_selected...\r\n");
; 0001 0178 boiler.state = boiler_work_heating;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0001 0179 break;
;PCODE: $0000022F VOL: 0
; 0001 017A case role_UK_103:
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0001 017B PRINT("role_UK_103...\r\n");
; 0001 017C switch(boiler.start_stage){
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0001 017D case stage_none:
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0001 017E PRINT("stage_none...\r\n");
; 0001 017F boiler.time_of_last_stage = GetTick_ms();
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0001 0180 boiler.start_stage = stage_blowing;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0001 0181 Ventilaytor_ON;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0001 0182 break;
;PCODE: $00000241 VOL: 0
; 0001 0183 case stage_blowing:
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0001 0184 PRINT("stage_blowing...\r\n");
; 0001 0185 if(GetTick_ms() - boiler.time_of_last_stage > 20000){
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0001 0186 TransRozgiga_ON;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0001 0187 Topl_Nasos_ON;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0001 0188 boiler.start_stage = stage_transformer_on;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0001 0189 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0001 018A }
; 0001 018B break;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0001 018C case stage_transformer_on:
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0001 018D PRINT("stage_transformer_on...\r\n");
; 0001 018E if(GetTick_ms() - boiler.time_of_last_stage < 3000){
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0001 018F #if ERRORS_ACTIVE
; 0001 0190 if(plamya_out){
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0001 0191 #endif
; 0001 0192 TransRozgiga_OFF;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0001 0193 boiler.start_stage = stage_none;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0001 0194 boiler.state = boiler_work_heating;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0001 0195 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0001 0196 #if ERRORS_ACTIVE
; 0001 0197 }
; 0001 0198 #endif
; 0001 0199 }
;PCODE: $00000272 VOL: 0
; 0001 019A else{
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0001 019B PRINT("error_FlameWork...\r\n");
; 0001 019C boiler.error = error_FlameWork;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0001 019D }
;PCODE: $00000278 VOL: 0
; 0001 019E break;
;PCODE: $00000279 VOL: 0
; 0001 019F }
;PCODE: $0000027A VOL: 0
; 0001 01A0 break;
;PCODE: $0000027B VOL: 0
; 0001 01A1 
; 0001 01A2 case role_UK_203:
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0001 01A3 switch(boiler.start_stage){
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0001 01A4 case stage_none:
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0001 01A5 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0001 01A6 boiler.start_stage = stage_blowing_test_off_check;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0001 01A7 break;
;PCODE: $0000028B VOL: 0
; 0001 01A8 
; 0001 01A9 case stage_blowing_test_off_check:
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0001 01AA if(GetTick_ms() - boiler.time_of_last_stage > 300){
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0001 01AB boiler.start_stage = stage_blowing_test_on_pre_check;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0001 01AC Ventilaytor_ON;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0001 01AD boiler.time_of_last_stage = GetTick_ms();
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0001 01AE }
; 0001 01AF break;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0001 01B0 case stage_blowing_test_on_pre_check:
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0001 01B1 if(GetTick_ms() - boiler.time_of_last_stage > 5000){
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0001 01B2 boiler.start_stage = stage_blowing;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0001 01B3 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0001 01B4 }
; 0001 01B5 break;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0001 01B6 case stage_blowing:
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0001 01B7 if(GetTick_ms() - boiler.time_of_last_stage > 20000){
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0001 01B8 TransRozgiga_ON;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0001 01B9 Klapan1_ON;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0001 01BA boiler.start_stage = stage_transformer_on;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0001 01BB boiler.time_of_last_stage = GetTick_ms();
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0001 01BC }
; 0001 01BD break;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0001 01BE case stage_transformer_on:
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0001 01BF if(GetTick_ms() - boiler.time_of_last_stage < 3000){
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0001 01C0 #if ERRORS_ACTIVE
; 0001 01C1 if(!clapan_out()){
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0001 01C2 boiler.error = error_AirDetectorWork;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0001 01C3 }
; 0001 01C4 if(Ion_out){
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0001 01C5 #endif
; 0001 01C6 TransRozgiga_OFF;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0001 01C7 boiler.start_stage = stage_none;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0001 01C8 boiler.state = boiler_work_heating;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0001 01C9 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0001 01CA #if ERRORS_ACTIVE
; 0001 01CB }
; 0001 01CC #endif
; 0001 01CD }
;PCODE: $000002EB VOL: 0
; 0001 01CE else{
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0001 01CF boiler.error = error_IonWork;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0001 01D0 }
;PCODE: $000002F1 VOL: 0
; 0001 01D1 break;
;PCODE: $000002F2 VOL: 0
; 0001 01D2 }
;PCODE: $000002F3 VOL: 0
; 0001 01D3 break;
;PCODE: $000002F4 VOL: 0
; 0001 01D4 
; 0001 01D5 case role_UK_303:
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0001 01D6 Klapan2_ON;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0001 01D7 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0001 01D8 boiler.state = boiler_work_heating;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0001 01D9 break;
;PCODE: $00000301 VOL: 0
; 0001 01DA 
; 0001 01DB case role_LAN_master:
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0001 01DC 
; 0001 01DD break;
;PCODE: $00000306 VOL: 0
; 0001 01DE 
; 0001 01DF case role_LAN_slave1:
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0001 01E0 
; 0001 01E1 break;
;PCODE: $0000030B VOL: 0
; 0001 01E2 
; 0001 01E3 case role_LAN_slave2:
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0001 01E4 
; 0001 01E5 break;
;PCODE: $00000310 VOL: 0
; 0001 01E6 }
;PCODE: $00000311 VOL: 0
; 0001 01E7 
; 0001 01E8 
; 0001 01E9 }
; 0001 01EA else{
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0001 01EB boiler.state = boiler_work_cooling;
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0001 01EC }
;PCODE: $00000317 VOL: 0
; 0001 01ED 
; 0001 01EE }
; 0001 01EF else{
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0001 01F0 //all off
; 0001 01F1 boiler.state = boiler_idle;
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0001 01F2 }
;PCODE: $0000031D VOL: 0
; 0001 01F3 break;
;PCODE: $0000031E VOL: 0
; 0001 01F4 
; 0001 01F5 case boiler_work_heating:
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0001 01F6 PRINT("boiler_work_heating...\r\n");
; 0001 01F7 switch (boiler.role){
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0001 01F8 case role_not_selected:
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0001 01F9 case role_UK_103:
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0001 01FA case role_UK_203:
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0001 01FB case role_LAN_master:
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0001 01FC case role_LAN_slave1:
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0001 01FD case role_LAN_slave2:
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0001 01FE if(boiler.command == boiler_work_heating){
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0001 01FF if(boiler.water_temp < boiler.water_goal_temp){
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0001 0200 }
; 0001 0201 else{
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0001 0202 boiler.state = bolier_work_blowing_precheck;
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0001 0203 boiler.time_of_last_stage = GetTick_ms();
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0001 0204 oneminute_counter = 0;
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0001 0205 }
;PCODE: $0000035B VOL: 0
; 0001 0206 }
; 0001 0207 else{
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0001 0208 //all off
; 0001 0209 boiler.state = bolier_work_blowing_precheck;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0001 020A boiler.time_of_last_stage = GetTick_ms();
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0001 020B oneminute_counter = 0;
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0001 020C }
;PCODE: $00000366 VOL: 0
; 0001 020D 
; 0001 020E break;
;PCODE: $00000367 VOL: 0
; 0001 020F case role_UK_303:
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0001 0210 if(boiler.command == boiler_work_heating){
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0001 0211 if(boiler.water_temp < boiler.water_goal_temp){
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0001 0212 }
; 0001 0213 else{
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0001 0214 boiler.state = boiler_work_cooling;
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0001 0215 }
;PCODE: $0000037C VOL: 0
; 0001 0216 }
; 0001 0217 else{
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0001 0218 //all off
; 0001 0219 boiler.state = boiler_idle;
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0001 021A }
;PCODE: $00000382 VOL: 0
; 0001 021B break;
;PCODE: $00000383 VOL: 0
; 0001 021C }
;PCODE: $00000384 VOL: 0
; 0001 021D break;
;PCODE: $00000385 VOL: 0
; 0001 021E 
; 0001 021F case bolier_work_blowing_precheck:
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0001 0220 switch (boiler.role){
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0001 0221 case role_not_selected:
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0001 0222 case role_UK_103:
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0001 0223 case role_UK_203:
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0001 0224 case role_LAN_master:
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0001 0225 case role_LAN_slave1:
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0001 0226 case role_LAN_slave2:
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0001 0227 TransRozgiga_OFF;
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0001 0228 Topl_Nasos_OFF;
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0001 0229 Klapan1_OFF;
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0001 022A Klapan2_OFF;
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0001 022B if(GetTick_ms() - boiler.time_of_last_stage > 3000){
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0001 022C boiler.state = boiler_work_blowing_after_heating;
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0001 022D boiler.time_of_last_stage = GetTick_ms();
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0001 022E oneminute_counter = 0;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0001 022F }
; 0001 0230 break;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0001 0231 case role_UK_303:
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0001 0232 break;
;PCODE: $000003CA VOL: 0
; 0001 0233 }
;PCODE: $000003CB VOL: 0
; 0001 0234 break;
;PCODE: $000003CC VOL: 0
; 0001 0235 break;
;PCODE: $000003CD VOL: 0
; 0001 0236 
; 0001 0237 case boiler_work_blowing_after_heating:
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0001 0238 
; 0001 0239 //this stage does not react to command, leaving the rest to boiler_work_cooling  ...
; 0001 023A TransRozgiga_OFF;
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0001 023B Topl_Nasos_OFF;
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0001 023C Klapan1_OFF;
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0001 023D Klapan2_OFF;
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0001 023E if(GetTick_ms() - boiler.time_of_last_stage > 60000){//limitations of 16bit max
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0001 023F boiler.time_of_last_stage = GetTick_ms();
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0001 0240 //oneminute_counter++;
; 0001 0241 //if(oneminute_counter == 3){//3*20000ms=60 sec
; 0001 0242 boiler.state = boiler_work_cooling;//will turn off completely on the next round
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0001 0243 //    oneminute_counter = 0;
; 0001 0244 //}
; 0001 0245 }
; 0001 0246 break;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0001 0247 
; 0001 0248 case boiler_work_cooling:
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0001 0249 turnAllOff();
;PCODE: $000003ED VOL: 0
; 0001 024A if(boiler.command == boiler_work_heating){
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0001 024B if(boiler.water_temp < boiler.water_goal_temp - boiler.gisteresis){
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0001 024C boiler.state = boiler_start_sequence;
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0001 024D }
; 0001 024E else{
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0001 024F //all off
; 0001 0250 }
;PCODE: $00000401 VOL: 0
; 0001 0251 }
; 0001 0252 else{
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0001 0253 //all off
; 0001 0254 boiler.state = boiler_idle;
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0001 0255 }
;PCODE: $00000407 VOL: 0
; 0001 0256 break;
;PCODE: $00000408 VOL: 0
; 0001 0257 }
;PCODE: $00000409 VOL: 0
; 0001 0258 PRINT("error = %s\r\n", errors_str[boiler.error]);
; 0001 0259 PRINT("<<<boiler_update()\r\n");
; 0001 025A }
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;void boiler_start(void){
; 0001 025C void boiler_start(void){
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0001 025D if(boiler.state == boiler_idle){
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0001 025E boiler.error =  error_None;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0001 025F }
; 0001 0260 boiler.command = boiler_work_heating;
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0001 0261 }
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;void boiler_stop(void){
; 0001 0263 void boiler_stop(void){
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0001 0264 boiler.command = boiler_idle;
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0001 0265 }
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;void boiler_toggle(void){
; 0001 0267 void boiler_toggle(void){
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0001 0268 if(boiler.command == boiler_idle){
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0001 0269 boiler_start();
;PCODE: $00000428 VOL: 0
; 0001 026A }
; 0001 026B else{
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0001 026C boiler_stop();
;PCODE: $0000042B VOL: 0
; 0001 026D }
;PCODE: $0000042C VOL: 0
; 0001 026E }
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;void boiler_update_nvm(void){
; 0001 0270 void boiler_update_nvm(void){
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0001 0271 //PRINT("===>>>boiler_update_nvm\r\n");
; 0001 0272 if( (boiler.command         != nvm_cache.command         )||
; 0001 0273 (boiler.water_goal_temp != nvm_cache.water_goal_temp )||
; 0001 0274 (boiler.gisteresis      != nvm_cache.gisteresis      )||
; 0001 0275 (boiler.weather         != nvm_cache.weather         )||
; 0001 0276 (boiler.role            != nvm_cache.role            )){
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0001 0277 //PRINT("=======WRITING EEPROM!!!=========\r\n");
; 0001 0278 nvm_cache.command         = boiler.command         ;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0001 0279 nvm_cache.water_goal_temp = boiler.water_goal_temp ;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0001 027A nvm_cache.gisteresis      = boiler.gisteresis      ;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0001 027B nvm_cache.weather         = boiler.weather         ;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0001 027C nvm_cache.role            = boiler.role            ;
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0001 027D eeprom_write_block(&nvm_cache, &eeinit_data, sizeof(nvm_data_t));
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0001 027E //delay_ms(1000);
; 0001 027F }
; 0001 0280 //PRINT("===<<<boiler_update_nvm\r\n");
; 0001 0281 }
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;void boiler_update_pump(void){//circulyacionny nasos
; 0001 0283 void boiler_update_pump(void){
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0001 0284 switch (boiler.weather){
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0001 0285 case weather_none:
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0001 0286 case weather_summer:
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0001 0287 if(boiler.error && (boiler.error != error_WaterLevel)){
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0001 0288 Setevoi_nasos_ON;
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0001 0289 }
; 0001 028A else{
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0001 028B Setevoi_nasos_OFF;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0001 028C }
;PCODE: $0000048C VOL: 0
; 0001 028D break;
;PCODE: $0000048D VOL: 0
; 0001 028E case weather_winter:
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0001 028F if(boiler.error){
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0001 0290 Setevoi_nasos_ON;
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0001 0291 }
; 0001 0292 else{//handle temperature, gisteresis
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0001 0293 int16_t pump_on_diff = (boiler.gisteresis > boiler.water_pump_on_temp) ? \
; 0001 0294 boiler.gisteresis : boiler.water_pump_on_temp;
; 0001 0295 if(boiler.water_temp > (boiler.water_goal_temp - \
; 0001 0296 pump_on_diff)){
;PCODE: $0000049A VOL: 0
;	pump_on_diff -> Y+0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0001 0297 Setevoi_nasos_ON;
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0001 0298 }
; 0001 0299 if(boiler.water_temp < (boiler.water_goal_temp - \
; 0001 029A pump_on_diff - \
; 0001 029B boiler.water_pump_gist_temp)){
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0001 029C Setevoi_nasos_OFF;
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0001 029D }
; 0001 029E }
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0001 029F break;
;PCODE: $000004C7 VOL: 0
; 0001 02A0 }
;PCODE: $000004C8 VOL: 0
; 0001 02A1 }
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
